# -*- coding: utf-8 -*-
"""
Created on Sun Jul  4 16:44:40 2021

@author: 82108
"""

"""
No.1 [Multiples of 3 and 5]

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def sum_3_5(number) :
    list_3_5 = []
    final = 0
    
    for n in range(1, number) :
        if n % 3 == 0 or n % 5 == 0 :
            list_3_5.append(n)
        else:
            continue
    
    for m in list_3_5 :
        final += m
    
    return final

sum_3_5(1000) # 233168










"""
No.2 [Even Fibonacci numbers]

Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Making a function that finds the sum of the even-valued terms.
"""

# method 1

def Fibonacci_even(number) :
    list_1 = [1]
    list_2 = [1]
    even_list = []
    all_Fibonacci = [1, 1]
    Fibonacci = 0
    even_Fibonacci_sum = 0
    cnt = 0
    
    if number == 1 :
        Fibonacci = 1
    elif number == 2 :
        Fibonacci = 1
    else :        
        while cnt < number - 2 :
            cnt += 1
            Fibonacci = list_1[-1] + list_2[-1]
            if cnt % 2 == 1 :
                list_1.append(Fibonacci)
                all_Fibonacci.append(Fibonacci)
            else :
                list_2.append(Fibonacci)
                all_Fibonacci.append(Fibonacci)
                
    for n in all_Fibonacci :
        if n % 2 == 0 :
            even_list.append(n)
        else : 
            continue
        
    for m in even_list :
        even_Fibonacci_sum += m
    
    return even_Fibonacci_sum

Fibonacci_even(2) # 0
Fibonacci_even(4) # 2
Fibonacci_even(6) # 10
Fibonacci_even(10) # 44
Fibonacci_even(20) # 3382

# method 2

def Fibonacci_Even(number) :
    result = 0
    cnt = 2
    Fibonacci_list = [1, 1]
    if number == 1 or number == 2:
        result = 0
    else :
        while cnt < number :
            cnt += 1
            Fibonacci_list.append(Fibonacci_list[-2] + Fibonacci_list[-1])
    for n in Fibonacci_list :
        if n % 2 == 0 :
            result += n
        else :
            continue
    return result

Fibonacci_Even(2) # 0
Fibonacci_Even(4) # 2
Fibonacci_Even(6) # 10
Fibonacci_Even(10) # 44










"""
No.3 [Largest prime factor]

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
"""

def prime_factors(number) :
    prime_list = []
    answer_list = []
    if number == 2 :
        prime_list.append(number)
    elif number > 2 :
        prime_list.append(2)
        for i in range(3, number + 1) :
            remainder_list = []
            for j in range(2, i) :
                remainder = i % j
                remainder_list.append(remainder)
            if 0 not in remainder_list :
                prime_list.append(i)
                prime_set = set(prime_list)
                final_list = list(prime_set)
    
    for fn in final_list :
        if number % fn == 0 :
            answer_list.append(fn)
    return answer_list

a = prime_factors(13195)
print(a) # [5, 7, 13, 29]










"""
No.4 [Largest palindrome product]

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""


def find_palindromic_number3() :
    
    palindromic_list = []
    
    for i in range(100, 999) :
        for j in range(100, 999) :
            mul_num = i * j
            str_num = str(mul_num)
            if str_num == str_num[::-1] :
                num = int(str_num)
                palindromic_list.append(num)
                
    
    return palindromic_list
    
num = find_palindromic_number3()
max(num) # 906609










"""
No.5 [Smallest multiple]

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""

def smallest_multiple(number) :
    result = True
    result_list = []
    prime_list = []
    for i in range(2, number+1) : 
        if i == 2 :
            prime_list.append(2)
        else : 
            result_list = []
            for j in range(2, i) :
                if i % j == 0 :
                    result = False
                    result_list.append(result)
            if False not in result_list : 
                prime_list.append(i)
    
    num_list = []
    
    for p in prime_list :
        cnt = 0
        while p ** cnt < 20 :
            cnt += 1
        num_list.append(p**(cnt-1))
        
    answer = 1
        
    for n in num_list :
        answer *= n
    
    return answer

print(smallest_multiple(20)) # 232792560

'''
[The answer]
232792560
'''



                    
                










